
plugins {
    id 'java'
//    id "jacoco"
}

description = "docs helper service"
group 'ru.mrs'
version '0.0.1-2022-01-25'

compileJava   {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

test {
    // never UP-TO-DATE
//  systemProperty "random.testing.seed", new Random().nextInt()
    useJUnitPlatform()
//    finalizedBy jacocoTestReport
}

/*jacocoTestReport {
    dependsOn test
}*/

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

ext {
    fingBugs_version = "3.0.2"
    lombok_version = '1.18.22'
    jetty9_version = "9.4.44.v20210927"
    servlet_version = "3.1.0"
//    servlet_version = '2.5'
    freemarker_version = "2.3.31"
    jackson_version = "2.13.1"
    mockito_version = "4.2.0"//"3.12.4"
    lang3_version = "3.12.0"
    log4j_version = "2.17.1"
    h2_version = "2.1.210"
//    h2_version = "1.4.200"
    junit58_version = "5.8.2"
    entrypoint = "ru.mrs.docs.Embedded"
    entrypoint_args = ''
}

dependencies {
    compileOnly "com.google.code.findbugs:jsr305:$fingBugs_version"
    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit58_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit58_version"
//    testImplementation "org.junit.jupiter:junit-jupiter:$junit58_version"
    implementation "org.apache.commons:commons-lang3:$lang3_version"
//    testImplementation "org.mockito:mockito-core:$mockito_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-api:$log4j_version"
    implementation "org.eclipse.jetty:jetty-server:$jetty9_version"
    implementation "org.eclipse.jetty:jetty-webapp:$jetty9_version"
//    implementation "org.eclipse.jetty:jetty-annotations:$jetty9_version"
//    implementation "org.eclipse.jetty:apache-jsp:$jetty9_version"
//    implementation 'jstl:jstl:1.2'
    implementation "org.freemarker:freemarker:$freemarker_version"
//    compileOnly "javax.servlet:javax.servlet-api:$servlet_version"
    implementation "javax.servlet:javax.servlet-api:$servlet_version"
    implementation "com.h2database:h2:$h2_version"
//    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
//    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
//    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
//    implementation "jakarta.servlet:jakarta.servlet-api:$servlet5_version"
//    implementation "org.eclipse.jetty.websocket:websocket-servlet:$jetty9_version"
//    implementation "org.eclipse.jetty.websocket:websocket-server:$jetty9_version"
//    implementation "mysql:mysql-connector-java:$mysqlVersion"
//    implementation "org.slf4j:slf4j-api:$log_version"
//    implementation 'commons-logging:commons-logging:1.2'
//    implementation "org.slf4j:slf4j-log4j12:2.0.0-alpha5"
//    testImplementation "org.assertj:assertj-core:3.21.0"
    implementation "org.eclipse.jetty:jetty-servlet:$jetty9_version"
    implementation "org.eclipse.jetty:jetty-util:$jetty9_version"
//    implementation 'org.apiguardian:apiguardian-api:1.1.2'
    /*testImplementation 'org.junit.platform:junit-platform-engine:1.8.2'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.8.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.8.2'
    testImplementation 'org.junit.platform:junit-platform-commons:1.8.2'
    implementation 'org.opentest4j:opentest4j:1.2.0'
    testImplementation 'org.jacoco:org.jacoco.ant:0.8.7'
    testImplementation 'org.jacoco:org.jacoco.agent:0.8.7'
    testImplementation 'org.jacoco:org.jacoco.core:0.8.7'
    testImplementation 'org.jacoco:org.jacoco.report:0.8.7'*/
//    implementation "org.eclipse.jetty:jetty-security:$jetty9_version"
//    implementation "org.eclipse.jetty:jetty-http:$jetty9_version"
//    implementation "org.eclipse.jetty:jetty-io:$jetty9_version"
}

sourceSets {
    main {
        resources {
            exclude '**/*.zip'
        }
    }
}

/*
task copyData(type: Copy) {
    from 'data'
    into 'build/classes/java/main/data'
    exclude "*.zip"
}
*/
//classes.dependsOn(copyData)

/*task copyDataTest(type: Copy) {
    from 'data'
    into 'build/classes/java/test/data'
    exclude "*.zip"
}*/

/*task runMain(type : JavaExec ){
    classpath = sourceSets.main.runtimeClasspath
    mainClass = entrypoint
    args entrypoint_args
}*/

project.configurations.implementation.setCanBeResolved(true)
jar {
    def manifestClasspath = "commons-lang3-3.12.0.jar log4j-core-2.17.1.jar            log4j-api-2.17.1.jar jetty-webapp-9.4.44.v20210927.jar               jetty-servlet-9.4.44.v20210927.jar                                   jetty-security-9.4.44.v20210927.jar                                  freemarker-2.3.31.jar h2-2.1.210.jar javax.servlet-api-3.1.0.jar     jetty-http-9.4.44.v20210927.jar jetty-io-9.4.44.v20210927.jar        jetty-xml-9.4.44.v20210927.jar jetty-util-ajax-9.4.44.v20210927.jar  jetty-util-9.4.44.v20210927.jar jetty-server-9.4.44.v20210927.jar"
//    def manifestClasspath = "*.jar"
//    def manifestClasspath = configurations.implementation.collect { it.getName() }.join(' ')
//    project.sourceSets.main.runtimeClasspath.collect { "WEB-INF/lib/${it.name}" }.join(' ')
    manifest {
        attributes["Manifest-Version"] = "1.0"
        attributes["Created-By"] = "Gradle ${gradle.gradleVersion}"
        attributes["Build-Jdk"] = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
        attributes["Build-OS"] = "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        attributes["Implementation-Title"] = project.name
        attributes["Implementation-Version"] = project.version
        attributes["Build-Timestamp"] = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
//        attributes["Built-By"] = System.properties['user.name']
        attributes["Main-Class"] = entrypoint
        attributes["Class-Path"] = manifestClasspath
    }
//    processResources.exclude('*')
//    archiveName 'docs-helper-0.0.1-SNAPSHOT.jar'
    doLast {
        copy {
            from layout.buildDirectory.dir("libs")
            from "lib"
            include "*.jar"
            into "bin"
        }
        copy {
            from 'src/main/resources'
            exclude '**/*.zip'
            include "**/*.*"
            into "bin"
        }
        copy {
            from 'content'
            exclude '**/*.zip'
            into "bin/content"
        }
        copy {
            from 'append'
            include "**/*.*"
            into "bin"
        }
    }
}

clean{
    delete 'bin'
}

//test.dependsOn(copyDataTest)
